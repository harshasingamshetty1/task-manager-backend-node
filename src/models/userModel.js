const mongoose = require("mongoose");
const bcryptjs = require("bcryptjs");
const validator = require("validator");
const jwt = require("jsonwebtoken");
const Task = require("./taskModel");
const userSchema = mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
      trim: true,
    },
    email: {
      type: String,
      unique: true,
      required: true,
      trim: true,
      lowercase: true,
      validate(value) {
        if (!validator.isEmail(value)) {
          throw new Error("Email is invalid");
        }
      },
    },
    password: {
      type: String,
      required: true,
      minlength: 4,
      trim: true,
      validate(value) {
        if (value.toLowerCase().includes("password")) {
          throw new Error('Password cannot contain "password"');
        }
      },
    },
    age: {
      type: Number,
      default: 0,
      validate(value) {
        if (value < 0) {
          throw new Error("Age must be a postive number");
        }
      },
    },
    avatar: {
      type: Buffer,
      // all the validations are done using the multer middleware, so no need to validate here
    },
    tokens: [
      {
        token: {
          type: String,
          required: true,
        },
      },
    ],
  },
  {
    timestamps: true,
  }
);

userSchema.virtual("tasks", {
  ref: "Task",
  localField: "_id",
  foreignField: "owner",
});

//methods are accessible on the instances
userSchema.methods.toJSON = function () {
  const user = this;
  const userObject = user.toObject();
  delete userObject.password;
  delete userObject.tokens;
  return userObject;
};

userSchema.methods.generateAuthToken = async function () {
  const user = this;
  //SingamNodeJs -this is the private key we used to generate tokens,
  //we have to use this, while verifying to know, whether the token was generated by our program or not
  const token = await jwt.sign({ _id: user.id.toString() }, "SingamNodeJs");
  user.tokens.push({ token });
  // console.log(user);
  await user.save();
  return token;
};

//statics are accessible on the models
userSchema.statics.getUserByCredentials = async (email, password) => {
  const user = await User.findOne({ email });

  if (!user) {
    throw new Error("Invalid Credentials!");
  }
  const isMatch = await bcryptjs.compare(password, user.password);
  if (!isMatch) {
    throw new Error("Invalid Credentials!");
  }
  return user;
};
// Hash the plain text [password] before saving, using middleware
userSchema.pre("save", async function (next) {
  if (this.isModified("password")) {
    this.password = await bcryptjs.hash(this.password, 8);
  }
  //this is to make acknowledgement that our current middelware func is done, so next()
  next();
});

//we used document:true option, to make sure we are correctly referecing using the this keyword!
userSchema.pre("deleteOne", { document: true }, async function (next) {
  const user = this;
  try {
    await Task.deleteMany({ owner: user._id });
    next();
  } catch {}
});
const User = mongoose.model("User", userSchema);

module.exports = User;
